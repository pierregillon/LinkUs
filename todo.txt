* lock on queue for SocketConnection => "exit" on remote shell
* ILogger in ExternalAssemblyModule to do the Console Printing.
* Request frequently the basic information to keep information up to date.
* remove -Exception at the end of custom exception name
* retain -target in file to simplify command.
* admin mode for app, need to write to c:\
* The message size for uploading/downloading is huge because of UTF8 conversion. Find something to reduce the size (before compression)
* Send command without return result. (underlying sync call with byte result)
* upload with directory path as destination.
* Deserialization with typeof(TCommand) to replace with command.GetType() => let dev to serialize partial data .
* dont use handler with return type, only void, and pass IBus systematically to interact with host process.
* when client not responding for a period of time during the Receive/Stream, free resource and throw exception.
* use of the stream for shell command line handler.
* catch exception in downloader/uploader and try to send message to client to close the file.
* better error display of uncatch exception. Base exception for known that display message and not stacktrace.
* Refactor server to use 0 dependencies (file injection)
* free the asyncOperation before to call the DataReceived delegate.
* When bad clientId is send to server, respond cliendId not found.
* Close commandline when connection closed.
* Create install-module that upload and load a module
* Modify list-modules to set target as not mandatory. If no target, list the modules available from commandline.
* Check module install command ? get Module
* display client id in color to be visually better (dark red)