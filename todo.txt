Core
* ILogger in ExternalAssemblyModule to do the Console Printing.
* remove -Exception at the end of custom exception name
* Deserialization with typeof(TCommand) to replace with command.GetType() => let dev to serialize partial data .
* free the asyncOperation before to call the DataReceived delegate.
* do a charge test with 100 connections downloading files
* try to reproduce the bug when executing a remote command : dir /s *.*
* Compress data exchange to reduce network charge.

Server
* Request frequently the basic information to keep information up to date.
* Refactor server to use 0 dependencies (file injection)
* When bad clientId is send to server, respond cliendId not found.
* When overloaded send a command for incoming connection to inform the address of another server.

CommandLine
* retain -target in file to simplify command.
* The message size for uploading/downloading is huge because of UTF8 conversion.
* Download a full folder
* display client id in color to be visually better (dark red)
* generic config ini reading with int.parse() automatically
* allow the multiple download of same file (openfile in read only mode with no lock)
* pass the RemoteClient to the remoteshellcontroller.
* install module with lower case
* install module with partial name?
* need a command to get the client status. ./lkus status -t 21
	1. Good state : well installed
	2. Bad state : not installed properly

Client
* admin mode for app, need to write to c:\
* install the client
* check install before starting when well located
* verify that the admin mode is useful. if yes, disable uac
* when booting, check if a better or equals version is already installed. If yes, do nothing. Else, install.
* uninstall client by command
	* reenable uac to default
	* delete file
	* delete modules
	* reset registry
* get the module directory from the client
* tests for Installer::Uninstall
* tests for InstallationProcessSupervisor

RemoteShell
* Cancel the Console.ReadLine() with win32 call.
* verify the runas! should not raise uac!

Studies
* Send command without return result. (underlying sync call with byte result)
* dont use handler with return type, only void, and pass IBus systematically to interact with host process.
* Dedicated CommandSender to avoid to pass the cliendId every time.